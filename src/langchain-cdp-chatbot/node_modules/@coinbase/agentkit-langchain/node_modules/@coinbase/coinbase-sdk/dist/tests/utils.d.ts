/// <reference types="jest" />
import { AxiosInstance } from "axios";
import { Configuration, Wallet as WalletModel, Balance as BalanceModel, AddressBalanceList, Address as AddressModel, Transfer as TransferModel, FaucetTransaction as FaucetTransactionModel, StakingOperation as StakingOperationModel, PayloadSignature as PayloadSignatureModel, CompiledSmartContract as CompiledSmartContractModel, PayloadSignatureList, ContractInvocation as ContractInvocationModel, SmartContract as SmartContractModel, CryptoAmount as CryptoAmountModel, Asset as AssetModel, FundQuote as FundQuoteModel, FundOperation as FundOperationModel, ValidatorList, Validator, StakingOperationStatusEnum, ValidatorStatus } from "../client";
import { HDKey } from "@scure/bip32";
export declare const mockFn: (...args: any[]) => any;
export declare const mockReturnValue: (data: any) => jest.Mock<any, any, any>;
export declare const mockReturnRejectedValue: (data: any) => jest.Mock<any, any, any>;
export declare const getAddressFromHDKey: (hdKey: HDKey) => string;
export declare const mockListAddress: (seed: string, count?: number) => {
    address_id: string;
    network_id: "base-sepolia";
    public_key: string;
    wallet_id: `${string}-${string}-${string}-${string}-${string}`;
}[];
export declare const walletId: `${string}-${string}-${string}-${string}-${string}`;
export declare const transferId: `${string}-${string}-${string}-${string}-${string}`;
export declare const amount = "0";
export declare const generateWalletFromSeed: (seed: string, count?: number) => Record<string, string>;
export declare const generateRandomHash: (length?: number) => string;
export declare const newAddressModel: (walletId: string, address_id?: string, network_id?: string, index?: number) => AddressModel;
export declare const VALID_ADDRESS_MODEL: AddressModel;
export declare const VALID_WALLET_MODEL: WalletModel;
export declare const VALID_TRANSFER_MODEL: TransferModel;
export declare const VALID_TRANSFER_SPONSORED_SEND_MODEL: TransferModel;
export declare const VALID_STAKING_OPERATION_MODEL: StakingOperationModel;
export declare const VALID_PAYLOAD_SIGNATURE_MODEL: PayloadSignatureModel;
export declare const VALID_SIGNED_PAYLOAD_SIGNATURE_MODEL: PayloadSignatureModel;
export declare const VALID_PAYLOAD_SIGNATURE_LIST: PayloadSignatureList;
export declare const MINT_NFT_ABI: {
    inputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    name: string;
    outputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    stateMutability: string;
    type: string;
}[];
export declare const MINT_NFT_ARGS: {
    recipient: string;
};
export declare const VALID_FAUCET_TRANSACTION_MODEL: FaucetTransactionModel;
export declare const VALID_CONTRACT_INVOCATION_MODEL: ContractInvocationModel;
export declare const VALID_SIGNED_CONTRACT_INVOCATION_MODEL: ContractInvocationModel;
export declare const ERC20_NAME = "Test ERC20 Token";
export declare const ERC20_SYMBOL = "TEST";
export declare const ERC20_TOTAL_SUPPLY = 100;
export declare const VALID_SMART_CONTRACT_ERC20_MODEL: SmartContractModel;
export declare const VALID_EXTERNAL_SMART_CONTRACT_ERC20_MODEL: SmartContractModel;
export declare const ERC721_NAME = "Test NFT";
export declare const ERC721_SYMBOL = "TEST";
export declare const ERC721_BASE_URI = "https://example.com/metadata/";
export declare const VALID_SMART_CONTRACT_ERC721_MODEL: SmartContractModel;
export declare const ERC1155_URI = "https://example.com/{id}.json";
export declare const VALID_SMART_CONTRACT_ERC1155_MODEL: SmartContractModel;
export declare const VALID_COMPILED_CONTRACT_MODEL: CompiledSmartContractModel;
export declare const VALID_SMART_CONTRACT_CUSTOM_MODEL: SmartContractModel;
export declare const VALID_SMART_CONTRACT_EXTERNAL_MODEL: SmartContractModel;
export declare const VALID_USDC_CRYPTO_AMOUNT_MODEL: CryptoAmountModel;
export declare const VALID_ETH_CRYPTO_AMOUNT_MODEL: CryptoAmountModel;
export declare const VALID_ASSET_MODEL: AssetModel;
export declare const VALID_FUND_QUOTE_MODEL: FundQuoteModel;
export declare const VALID_FUND_OPERATION_MODEL: FundOperationModel;
/**
 * mockStakingOperation returns a mock StakingOperation object with the provided status.
 *
 * @param status - The status of the validator.
 *
 * @returns The mock StakingOperationModel object.
 */
export declare function mockStakingOperation(status: StakingOperationStatusEnum): StakingOperationModel;
export declare const VALID_NATIVE_ETH_UNSTAKE_OPERATION_MODEL: StakingOperationModel;
export declare const VALID_ADDRESS_BALANCE_LIST: AddressBalanceList;
/**
 * mockEthereumValidator returns a mock EthereumValidator object with the provided index and status.
 *
 * @param index - The index of the validator.
 * @param status - The status of the validator.
 * @param public_key - The public key of the validator.
 *
 * @returns The mock EthereumValidator object.
 */
export declare function mockEthereumValidator(index: string, status: ValidatorStatus, public_key: string): Validator;
export declare const VALID_ACTIVE_VALIDATOR_LIST: ValidatorList;
export declare const VALID_EXITING_VALIDATOR_LIST: ValidatorList;
export declare const VALID_BALANCE_MODEL: BalanceModel;
/**
 * getAssetMock returns a mock function that returns an AssetModel with the provided network ID and asset ID.
 *
 * @returns The mock function.
 */
export declare const getAssetMock: () => any;
/**
 * AxiosMockReturn type. Represents the Axios instance, configuration, and base path.
 */
type AxiosMockType = [AxiosInstance, Configuration, string];
/**
 * Returns an Axios instance with interceptors and configuration for testing.
 *
 * @returns The Axios instance, configuration, and base path.
 */
export declare const createAxiosMock: () => AxiosMockType;
export declare const usersApiMock: {
    getCurrentUser: jest.Mock<any, any, any>;
};
export declare const assetsApiMock: {
    getAsset: jest.Mock<any, any, any>;
};
export declare const walletsApiMock: {
    getWallet: jest.Mock<any, any, any>;
    createWallet: jest.Mock<any, any, any>;
    listWallets: jest.Mock<any, any, any>;
    listWalletBalances: jest.Mock<any, any, any>;
    getWalletBalance: jest.Mock<any, any, any>;
};
export declare const addressesApiMock: {
    requestFaucetFunds: jest.Mock<any, any, any>;
    getAddress: jest.Mock<any, any, any>;
    listAddresses: jest.Mock<any, any, any>;
    getAddressBalance: jest.Mock<any, any, any>;
    listAddressBalances: jest.Mock<any, any, any>;
    createAddress: jest.Mock<any, any, any>;
    createPayloadSignature: jest.Mock<any, any, any>;
    getPayloadSignature: jest.Mock<any, any, any>;
    listPayloadSignatures: jest.Mock<any, any, any>;
};
export declare const tradeApiMock: {
    getTrade: jest.Mock<any, any, any>;
    listTrades: jest.Mock<any, any, any>;
    createTrade: jest.Mock<any, any, any>;
    broadcastTrade: jest.Mock<any, any, any>;
};
export declare const transfersApiMock: {
    broadcastTransfer: jest.Mock<any, any, any>;
    createTransfer: jest.Mock<any, any, any>;
    getTransfer: jest.Mock<any, any, any>;
    listTransfers: jest.Mock<any, any, any>;
};
export declare const stakeApiMock: {
    buildStakingOperation: jest.Mock<any, any, any>;
    getExternalStakingOperation: jest.Mock<any, any, any>;
    getStakingContext: jest.Mock<any, any, any>;
    fetchStakingRewards: jest.Mock<any, any, any>;
    fetchHistoricalStakingBalances: jest.Mock<any, any, any>;
    getValidator: jest.Mock<any, any, any>;
    listValidators: jest.Mock<any, any, any>;
};
export declare const walletStakeApiMock: {
    broadcastStakingOperation: jest.Mock<any, any, any>;
    createStakingOperation: jest.Mock<any, any, any>;
    getStakingOperation: jest.Mock<any, any, any>;
};
export declare const validatorApiMock: {
    getValidator: jest.Mock<any, any, any>;
    listValidators: jest.Mock<any, any, any>;
};
export declare const externalAddressApiMock: {
    listExternalAddressBalances: jest.Mock<any, any, any>;
    getExternalAddressBalance: jest.Mock<any, any, any>;
    requestExternalFaucetFunds: jest.Mock<any, any, any>;
    listAddressTransactions: jest.Mock<any, any, any>;
    getFaucetTransaction: jest.Mock<any, any, any>;
};
export declare const balanceHistoryApiMock: {
    listAddressHistoricalBalance: jest.Mock<any, any, any>;
};
export declare const transactionHistoryApiMock: {
    listAddressTransactions: jest.Mock<any, any, any>;
};
export declare const serverSignersApiMock: {
    listServerSigners: jest.Mock<any, any, any>;
};
export declare const contractEventApiMock: {
    listContractEvents: jest.Mock<any, any, any>;
};
export declare const smartContractApiMock: {
    compileSmartContract: jest.Mock<any, any, any>;
    createSmartContract: jest.Mock<any, any, any>;
    deploySmartContract: jest.Mock<any, any, any>;
    getSmartContract: jest.Mock<any, any, any>;
    listSmartContracts: jest.Mock<any, any, any>;
    readContract: jest.Mock<any, any, any>;
    registerSmartContract: jest.Mock<any, any, any>;
    updateSmartContract: jest.Mock<any, any, any>;
};
export declare const contractInvocationApiMock: {
    getContractInvocation: jest.Mock<any, any, any>;
    listContractInvocations: jest.Mock<any, any, any>;
    createContractInvocation: jest.Mock<any, any, any>;
    broadcastContractInvocation: jest.Mock<any, any, any>;
};
export declare const assetApiMock: {
    getAsset: jest.Mock<any, any, any>;
};
export declare const fundOperationsApiMock: {
    getFundOperation: jest.Mock<any, any, any>;
    listFundOperations: jest.Mock<any, any, any>;
    createFundOperation: jest.Mock<any, any, any>;
    createFundQuote: jest.Mock<any, any, any>;
};
export declare const reputationApiMock: {
    getAddressReputation: jest.Mock<any, any, any>;
};
export declare const testAllReadTypesABI: readonly [{
    readonly type: "function";
    readonly name: "exampleFunction";
    readonly inputs: readonly [{
        readonly name: "z";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureAddress";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureArray";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256[]";
        readonly internalType: "uint256[]";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBool";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes1";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes1";
        readonly internalType: "bytes1";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes10";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes10";
        readonly internalType: "bytes10";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes11";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes11";
        readonly internalType: "bytes11";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes12";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes12";
        readonly internalType: "bytes12";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes13";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes13";
        readonly internalType: "bytes13";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes14";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes14";
        readonly internalType: "bytes14";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes15";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes15";
        readonly internalType: "bytes15";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes16";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes16";
        readonly internalType: "bytes16";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes17";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes17";
        readonly internalType: "bytes17";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes18";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes18";
        readonly internalType: "bytes18";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes19";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes19";
        readonly internalType: "bytes19";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes2";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes2";
        readonly internalType: "bytes2";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes20";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes20";
        readonly internalType: "bytes20";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes21";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes21";
        readonly internalType: "bytes21";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes22";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes22";
        readonly internalType: "bytes22";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes23";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes23";
        readonly internalType: "bytes23";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes24";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes24";
        readonly internalType: "bytes24";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes25";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes25";
        readonly internalType: "bytes25";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes26";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes26";
        readonly internalType: "bytes26";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes27";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes27";
        readonly internalType: "bytes27";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes28";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes28";
        readonly internalType: "bytes28";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes29";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes29";
        readonly internalType: "bytes29";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes3";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes3";
        readonly internalType: "bytes3";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes30";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes30";
        readonly internalType: "bytes30";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes31";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes31";
        readonly internalType: "bytes31";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes32";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes4";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes5";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes5";
        readonly internalType: "bytes5";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes6";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes6";
        readonly internalType: "bytes6";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes7";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes7";
        readonly internalType: "bytes7";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes8";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes8";
        readonly internalType: "bytes8";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytes9";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes9";
        readonly internalType: "bytes9";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureBytesShort";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureFunctionSelector";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureInt128";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "int128";
        readonly internalType: "int128";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureInt16";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "int16";
        readonly internalType: "int16";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureInt256";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "int256";
        readonly internalType: "int256";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureInt32";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "int32";
        readonly internalType: "int32";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureInt64";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "int64";
        readonly internalType: "int64";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureInt8";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "int8";
        readonly internalType: "int8";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureNestedStruct";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "tuple";
        readonly internalType: "struct TestAllReadTypes.ExampleStruct";
        readonly components: readonly [{
            readonly name: "a";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "nestedFields";
            readonly type: "tuple";
            readonly internalType: "struct TestAllReadTypes.NestedData";
            readonly components: readonly [{
                readonly name: "nestedArray";
                readonly type: "tuple";
                readonly internalType: "struct TestAllReadTypes.ArrayData";
                readonly components: readonly [{
                    readonly name: "a";
                    readonly type: "uint256[]";
                    readonly internalType: "uint256[]";
                }];
            }, {
                readonly name: "a";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }];
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureString";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "string";
        readonly internalType: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureTuple";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureTupleMixedTypes";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureUint128";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint128";
        readonly internalType: "uint128";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureUint16";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint16";
        readonly internalType: "uint16";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureUint256";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureUint32";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureUint64";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint64";
        readonly internalType: "uint64";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "pureUint8";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint8";
        readonly internalType: "uint8";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "returnFunction";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "function";
        readonly internalType: "function (uint256) external returns (bool)";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "viewUint";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "x";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}];
export {};
